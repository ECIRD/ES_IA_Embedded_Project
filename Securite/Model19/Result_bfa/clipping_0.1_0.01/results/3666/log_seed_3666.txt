save path : ./save/resnet9_quan/clipping_0.1_0.01/results/3666
{'data_path': './dataset', 'arch': 'resnet9_quan', 'dataset': 'cifar10', 'epochs': 40, 'start_epoch': 0, 'attack_sample_size': 100, 'test_batch_size': 100, 'optimizer': 'SGD', 'schedule': [25, 40], 'gammas': [0.1, 0.1], 'workers': 4, 'ngpu': 1, 'gpu_id': 0, 'print_freq': 100, 'decay': 0.0003, 'momentum': 0.9, 'limit_layer': -1, 'randbet_coeff': 10, 'k_top': 100, 'randbet': False, 'clipping_coeff': 0.1, 'learning_rate': 0.01, 'manualSeed': 3666, 'save_path': './save/resnet9_quan/clipping_0.1_0.01/results/3666', 'enable_bfa': True, 'resume': './save/resnet9_quan/clipping_0.1_0.01/model_best.pth.tar', 'quan_bitwidth': None, 'reset_weight': True, 'evaluate': True, 'n_iter': 30, 'fine_tune': True, 'model_only': False, 'random_bfa': False, 'use_cuda': True}
Random Seed: 3666
python version : 3.12.12 | packaged by Anaconda, Inc. | (main, Oct 14 2025, 16:10:16) [MSC v.1929 64 bit (AMD64)]
torch  version : 2.6.0+cu124
cudnn  version : 90100
=> creating model 'resnet9_quan'
=> network :
 Sequential(
  (0): Sequential(
    (0): quan_Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (1): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (2): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (4): Dropout2d(p=0.2, inplace=False)
  (5): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (skip): Conv2d(8, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  )
  (6): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (8): Dropout2d(p=0.3, inplace=False)
  (9): Sequential(
    (0): quan_Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (10): Sequential(
    (0): quan_Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (12): Dropout2d(p=0.3, inplace=False)
  (13): Sequential(
    (0): quan_Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (14): AdaptiveAvgPool2d(output_size=(1, 1))
  (15): Flatten()
  (16): quan_Linear(in_features=64, out_features=128, bias=False)
  (17): ReLU(inplace=True)
  (18): Dropout(p=0.35, inplace=False)
  (19): quan_Linear(in_features=128, out_features=10, bias=False)
  (20): Softmax(dim=1)
)
=> loading checkpoint './save/resnet9_quan/clipping_0.1_0.01/model_best.pth.tar'
=> loaded checkpoint './save/resnet9_quan/clipping_0.1_0.01/model_best.pth.tar' (epoch 0)
  **Test** Prec@1 51.180 Prec@5 92.070 Error@1 48.820
k_top=100
Attack_sample=100
************** ATTACK iteration *****************
Iteration: [001/030]   Attack Time 0.753 (0.753)  [2025-10-29 12:11:33]
loss before attack: 1.6029
loss after attack: 1.7022
bit flips: 1
hamming_dist: 1
  **Test** Prec@1 47.000 Prec@5 89.660 Error@1 53.000
iteration Time 18.700 (18.700)
************** ATTACK iteration *****************
Iteration: [002/030]   Attack Time 0.254 (0.504)  [2025-10-29 12:11:52]
loss before attack: 1.7022
loss after attack: 1.8711
bit flips: 2
hamming_dist: 2
  **Test** Prec@1 33.780 Prec@5 80.710 Error@1 66.220
iteration Time 18.366 (18.533)
************** ATTACK iteration *****************
Iteration: [003/030]   Attack Time 0.254 (0.421)  [2025-10-29 12:12:11]
loss before attack: 1.8711
loss after attack: 1.9639
bit flips: 3
hamming_dist: 3
  **Test** Prec@1 23.740 Prec@5 71.320 Error@1 76.260
iteration Time 18.517 (18.528)
************** ATTACK iteration *****************
Iteration: [004/030]   Attack Time 0.256 (0.380)  [2025-10-29 12:12:30]
loss before attack: 1.9639
loss after attack: 2.0197
bit flips: 4
hamming_dist: 4
  **Test** Prec@1 18.820 Prec@5 65.680 Error@1 81.180
iteration Time 18.341 (18.481)
************** ATTACK iteration *****************
Iteration: [005/030]   Attack Time 0.255 (0.355)  [2025-10-29 12:12:48]
loss before attack: 2.0197
loss after attack: 2.0899
bit flips: 5
hamming_dist: 5
  **Test** Prec@1 16.810 Prec@5 62.680 Error@1 83.190
iteration Time 18.589 (18.503)
************** ATTACK iteration *****************
Iteration: [006/030]   Attack Time 0.261 (0.339)  [2025-10-29 12:13:07]
loss before attack: 2.0899
loss after attack: 2.1482
bit flips: 6
hamming_dist: 6
  **Test** Prec@1 14.800 Prec@5 59.220 Error@1 85.200
iteration Time 18.493 (18.501)
************** ATTACK iteration *****************
Iteration: [007/030]   Attack Time 0.250 (0.326)  [2025-10-29 12:13:26]
loss before attack: 2.1482
loss after attack: 2.1735
bit flips: 7
hamming_dist: 7
  **Test** Prec@1 13.380 Prec@5 57.090 Error@1 86.620
iteration Time 18.489 (18.499)
************** ATTACK iteration *****************
Iteration: [008/030]   Attack Time 0.191 (0.309)  [2025-10-29 12:13:45]
loss before attack: 2.1735
loss after attack: 2.1858
bit flips: 8
hamming_dist: 8
  **Test** Prec@1 11.970 Prec@5 54.570 Error@1 88.030
iteration Time 18.359 (18.482)
************** ATTACK iteration *****************
Iteration: [009/030]   Attack Time 0.193 (0.297)  [2025-10-29 12:14:03]
loss before attack: 2.1858
loss after attack: 2.1958
bit flips: 9
hamming_dist: 9
  **Test** Prec@1 10.850 Prec@5 52.540 Error@1 89.150
iteration Time 18.380 (18.470)
