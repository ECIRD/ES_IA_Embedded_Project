save path : ./save/resnet9_quan/clipping_0.2_0.01/results/4258
{'data_path': './dataset', 'arch': 'resnet9_quan', 'dataset': 'cifar10', 'epochs': 40, 'start_epoch': 0, 'attack_sample_size': 100, 'test_batch_size': 100, 'optimizer': 'SGD', 'schedule': [25, 40], 'gammas': [0.1, 0.1], 'workers': 4, 'ngpu': 1, 'gpu_id': 0, 'print_freq': 100, 'decay': 0.0003, 'momentum': 0.9, 'limit_layer': -1, 'randbet_coeff': 10, 'k_top': 100, 'randbet': False, 'clipping_coeff': 0.2, 'learning_rate': 0.01, 'manualSeed': 4258, 'save_path': './save/resnet9_quan/clipping_0.2_0.01/results/4258', 'enable_bfa': True, 'resume': './save/resnet9_quan/clipping_0.2_0.01/model_best.pth.tar', 'quan_bitwidth': None, 'reset_weight': True, 'evaluate': True, 'n_iter': 30, 'fine_tune': True, 'model_only': False, 'random_bfa': False, 'use_cuda': True}
Random Seed: 4258
python version : 3.12.12 | packaged by Anaconda, Inc. | (main, Oct 14 2025, 16:10:16) [MSC v.1929 64 bit (AMD64)]
torch  version : 2.6.0+cu124
cudnn  version : 90100
=> creating model 'resnet9_quan'
=> network :
 Sequential(
  (0): Sequential(
    (0): quan_Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (1): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (2): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (4): Dropout2d(p=0.2, inplace=False)
  (5): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (skip): Conv2d(8, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  )
  (6): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (8): Dropout2d(p=0.3, inplace=False)
  (9): Sequential(
    (0): quan_Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (10): Sequential(
    (0): quan_Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (12): Dropout2d(p=0.3, inplace=False)
  (13): Sequential(
    (0): quan_Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (14): AdaptiveAvgPool2d(output_size=(1, 1))
  (15): Flatten()
  (16): quan_Linear(in_features=64, out_features=128, bias=False)
  (17): ReLU(inplace=True)
  (18): Dropout(p=0.35, inplace=False)
  (19): quan_Linear(in_features=128, out_features=10, bias=False)
  (20): Softmax(dim=1)
)
=> loading checkpoint './save/resnet9_quan/clipping_0.2_0.01/model_best.pth.tar'
=> loaded checkpoint './save/resnet9_quan/clipping_0.2_0.01/model_best.pth.tar' (epoch 0)
  **Test** Prec@1 55.120 Prec@5 89.860 Error@1 44.880
k_top=100
Attack_sample=100
************** ATTACK iteration *****************
Iteration: [001/030]   Attack Time 0.616 (0.616)  [2025-10-29 13:21:41]
loss before attack: 1.5905
loss after attack: 1.6700
bit flips: 1
hamming_dist: 1
  **Test** Prec@1 55.160 Prec@5 90.010 Error@1 44.840
iteration Time 21.697 (21.697)
************** ATTACK iteration *****************
Iteration: [002/030]   Attack Time 0.292 (0.454)  [2025-10-29 13:22:03]
loss before attack: 1.6700
loss after attack: 1.8075
bit flips: 2
hamming_dist: 2
  **Test** Prec@1 49.790 Prec@5 88.540 Error@1 50.210
iteration Time 21.416 (21.556)
************** ATTACK iteration *****************
Iteration: [003/030]   Attack Time 0.298 (0.402)  [2025-10-29 13:22:25]
loss before attack: 1.8075
loss after attack: 1.9242
bit flips: 3
hamming_dist: 3
  **Test** Prec@1 41.630 Prec@5 84.700 Error@1 58.370
iteration Time 21.416 (21.510)
************** ATTACK iteration *****************
Iteration: [004/030]   Attack Time 0.288 (0.373)  [2025-10-29 13:22:46]
loss before attack: 1.9242
loss after attack: 2.0170
bit flips: 4
hamming_dist: 4
  **Test** Prec@1 34.580 Prec@5 80.080 Error@1 65.420
iteration Time 21.719 (21.562)
************** ATTACK iteration *****************
Iteration: [005/030]   Attack Time 0.290 (0.357)  [2025-10-29 13:23:08]
loss before attack: 2.0170
loss after attack: 2.0740
bit flips: 5
hamming_dist: 5
  **Test** Prec@1 29.650 Prec@5 75.300 Error@1 70.350
iteration Time 21.499 (21.549)
************** ATTACK iteration *****************
Iteration: [006/030]   Attack Time 0.246 (0.338)  [2025-10-29 13:23:30]
loss before attack: 2.0740
loss after attack: 2.1299
bit flips: 6
hamming_dist: 6
  **Test** Prec@1 24.960 Prec@5 69.060 Error@1 75.040
iteration Time 21.433 (21.530)
************** ATTACK iteration *****************
Iteration: [007/030]   Attack Time 0.214 (0.320)  [2025-10-29 13:23:52]
loss before attack: 2.1299
loss after attack: 2.1743
bit flips: 7
hamming_dist: 7
  **Test** Prec@1 20.920 Prec@5 64.440 Error@1 79.080
iteration Time 21.502 (21.526)
************** ATTACK iteration *****************
Iteration: [008/030]   Attack Time 0.227 (0.309)  [2025-10-29 13:24:14]
loss before attack: 2.1743
loss after attack: 2.2084
bit flips: 8
hamming_dist: 8
  **Test** Prec@1 17.840 Prec@5 60.980 Error@1 82.160
iteration Time 21.549 (21.529)
************** ATTACK iteration *****************
Iteration: [009/030]   Attack Time 0.220 (0.299)  [2025-10-29 13:24:35]
loss before attack: 2.2084
loss after attack: 2.2629
bit flips: 9
hamming_dist: 9
  **Test** Prec@1 14.570 Prec@5 57.540 Error@1 85.430
iteration Time 21.903 (21.571)
************** ATTACK iteration *****************
Iteration: [010/030]   Attack Time 0.223 (0.291)  [2025-10-29 13:24:57]
loss before attack: 2.2629
loss after attack: 2.2879
bit flips: 10
hamming_dist: 10
  **Test** Prec@1 12.980 Prec@5 55.780 Error@1 87.020
iteration Time 21.508 (21.564)
************** ATTACK iteration *****************
Iteration: [011/030]   Attack Time 0.213 (0.284)  [2025-10-29 13:25:19]
loss before attack: 2.2879
loss after attack: 2.2998
bit flips: 11
hamming_dist: 11
  **Test** Prec@1 11.510 Prec@5 53.580 Error@1 88.490
iteration Time 21.499 (21.558)
************** ATTACK iteration *****************
Iteration: [012/030]   Attack Time 0.210 (0.278)  [2025-10-29 13:25:41]
loss before attack: 2.2998
loss after attack: 2.3009
bit flips: 12
hamming_dist: 12
  **Test** Prec@1 10.450 Prec@5 51.370 Error@1 89.550
iteration Time 21.492 (21.553)
