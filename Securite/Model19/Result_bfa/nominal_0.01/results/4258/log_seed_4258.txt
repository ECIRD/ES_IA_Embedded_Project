save path : ./save/resnet9_quan/nominal_0.01/results/4258
{'data_path': './dataset', 'arch': 'resnet9_quan', 'dataset': 'cifar10', 'epochs': 40, 'start_epoch': 0, 'attack_sample_size': 100, 'test_batch_size': 100, 'optimizer': 'SGD', 'schedule': [25, 40], 'gammas': [0.1, 0.1], 'workers': 4, 'ngpu': 1, 'gpu_id': 0, 'print_freq': 100, 'decay': 0.0003, 'momentum': 0.9, 'limit_layer': -1, 'randbet_coeff': 10, 'k_top': 100, 'randbet': False, 'clipping_coeff': 0.0, 'learning_rate': 0.01, 'manualSeed': 4258, 'save_path': './save/resnet9_quan/nominal_0.01/results/4258', 'enable_bfa': True, 'resume': './save/resnet9_quan/nominal_0.01/model_best.pth.tar', 'quan_bitwidth': None, 'reset_weight': True, 'evaluate': True, 'n_iter': 30, 'fine_tune': True, 'model_only': False, 'random_bfa': False, 'use_cuda': True}
Random Seed: 4258
python version : 3.12.12 | packaged by Anaconda, Inc. | (main, Oct 14 2025, 16:10:16) [MSC v.1929 64 bit (AMD64)]
torch  version : 2.6.0+cu124
cudnn  version : 90100
=> creating model 'resnet9_quan'
=> network :
 Sequential(
  (0): Sequential(
    (0): quan_Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (1): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (2): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (4): Dropout2d(p=0.2, inplace=False)
  (5): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (skip): Conv2d(8, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  )
  (6): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (8): Dropout2d(p=0.3, inplace=False)
  (9): Sequential(
    (0): quan_Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (10): Sequential(
    (0): quan_Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (12): Dropout2d(p=0.3, inplace=False)
  (13): Sequential(
    (0): quan_Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (14): AdaptiveAvgPool2d(output_size=(1, 1))
  (15): Flatten()
  (16): quan_Linear(in_features=64, out_features=128, bias=False)
  (17): ReLU(inplace=True)
  (18): Dropout(p=0.35, inplace=False)
  (19): quan_Linear(in_features=128, out_features=10, bias=False)
  (20): Softmax(dim=1)
)
=> loading checkpoint './save/resnet9_quan/nominal_0.01/model_best.pth.tar'
=> loaded checkpoint './save/resnet9_quan/nominal_0.01/model_best.pth.tar' (epoch 0)
  **Test** Prec@1 51.140 Prec@5 89.640 Error@1 48.860
k_top=100
Attack_sample=100
************** ATTACK iteration *****************
Iteration: [001/030]   Attack Time 1.185 (1.185)  [2025-10-29 11:41:52]
loss before attack: 1.5869
loss after attack: 1.7667
bit flips: 1
hamming_dist: 1
  **Test** Prec@1 47.900 Prec@5 88.420 Error@1 52.100
iteration Time 21.233 (21.233)
************** ATTACK iteration *****************
Iteration: [002/030]   Attack Time 0.329 (0.757)  [2025-10-29 11:42:13]
loss before attack: 1.7667
loss after attack: 2.0722
bit flips: 2
hamming_dist: 2
  **Test** Prec@1 34.630 Prec@5 79.410 Error@1 65.370
iteration Time 20.445 (20.839)
************** ATTACK iteration *****************
Iteration: [003/030]   Attack Time 0.319 (0.611)  [2025-10-29 11:42:34]
loss before attack: 2.0722
loss after attack: 2.1643
bit flips: 3
hamming_dist: 3
  **Test** Prec@1 22.130 Prec@5 66.260 Error@1 77.870
iteration Time 20.712 (20.796)
************** ATTACK iteration *****************
Iteration: [004/030]   Attack Time 0.320 (0.538)  [2025-10-29 11:42:55]
loss before attack: 2.1643
loss after attack: 2.2843
bit flips: 4
hamming_dist: 4
  **Test** Prec@1 22.290 Prec@5 66.310 Error@1 77.710
iteration Time 20.700 (20.772)
************** ATTACK iteration *****************
Iteration: [005/030]   Attack Time 0.319 (0.495)  [2025-10-29 11:43:16]
loss before attack: 2.2843
loss after attack: 2.3307
bit flips: 5
hamming_dist: 5
  **Test** Prec@1 18.500 Prec@5 61.900 Error@1 81.500
iteration Time 20.664 (20.751)
************** ATTACK iteration *****************
Iteration: [006/030]   Attack Time 0.328 (0.467)  [2025-10-29 11:43:37]
loss before attack: 2.3307
loss after attack: 2.3664
bit flips: 6
hamming_dist: 6
  **Test** Prec@1 15.720 Prec@5 59.720 Error@1 84.280
iteration Time 20.298 (20.675)
************** ATTACK iteration *****************
Iteration: [007/030]   Attack Time 0.282 (0.440)  [2025-10-29 11:43:58]
loss before attack: 2.3664
loss after attack: 2.3850
bit flips: 7
hamming_dist: 7
  **Test** Prec@1 13.190 Prec@5 56.900 Error@1 86.810
iteration Time 20.514 (20.652)
************** ATTACK iteration *****************
Iteration: [008/030]   Attack Time 0.275 (0.420)  [2025-10-29 11:44:19]
loss before attack: 2.3850
loss after attack: 2.4029
bit flips: 8
hamming_dist: 8
  **Test** Prec@1 12.560 Prec@5 57.070 Error@1 87.440
iteration Time 20.504 (20.634)
************** ATTACK iteration *****************
Iteration: [009/030]   Attack Time 0.348 (0.412)  [2025-10-29 11:44:39]
loss before attack: 2.4029
loss after attack: 2.4186
bit flips: 9
hamming_dist: 9
  **Test** Prec@1 10.780 Prec@5 50.290 Error@1 89.220
iteration Time 20.835 (20.656)
