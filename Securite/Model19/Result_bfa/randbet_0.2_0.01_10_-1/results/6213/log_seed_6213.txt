save path : ./save/resnet9_quan/randbet_0.2_0.01_10_-1/results/6213
{'data_path': './dataset', 'arch': 'resnet9_quan', 'dataset': 'cifar10', 'epochs': 40, 'start_epoch': 0, 'attack_sample_size': 100, 'test_batch_size': 100, 'optimizer': 'SGD', 'schedule': [25, 40], 'gammas': [0.1, 0.1], 'workers': 4, 'ngpu': 1, 'gpu_id': 0, 'print_freq': 100, 'decay': 0.0003, 'momentum': 0.9, 'limit_layer': -1, 'randbet_coeff': 10, 'k_top': 100, 'randbet': True, 'clipping_coeff': 0.2, 'learning_rate': 0.01, 'manualSeed': 6213, 'save_path': './save/resnet9_quan/randbet_0.2_0.01_10_-1/results/6213', 'enable_bfa': True, 'resume': './save/resnet9_quan/randbet_0.2_0.01_10_-1/model_best.pth.tar', 'quan_bitwidth': None, 'reset_weight': True, 'evaluate': True, 'n_iter': 30, 'fine_tune': True, 'model_only': False, 'random_bfa': False, 'use_cuda': True}
Random Seed: 6213
python version : 3.12.12 | packaged by Anaconda, Inc. | (main, Oct 14 2025, 16:10:16) [MSC v.1929 64 bit (AMD64)]
torch  version : 2.6.0+cu124
cudnn  version : 90100
=> creating model 'resnet9_quan'
=> network :
 Sequential(
  (0): Sequential(
    (0): quan_Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (1): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (2): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (4): Dropout2d(p=0.2, inplace=False)
  (5): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (skip): Conv2d(8, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  )
  (6): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (8): Dropout2d(p=0.3, inplace=False)
  (9): Sequential(
    (0): quan_Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (10): Sequential(
    (0): quan_Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (12): Dropout2d(p=0.3, inplace=False)
  (13): Sequential(
    (0): quan_Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (14): AdaptiveAvgPool2d(output_size=(1, 1))
  (15): Flatten()
  (16): quan_Linear(in_features=64, out_features=128, bias=False)
  (17): ReLU(inplace=True)
  (18): Dropout(p=0.35, inplace=False)
  (19): quan_Linear(in_features=128, out_features=10, bias=False)
  (20): Softmax(dim=1)
)
=> loading checkpoint './save/resnet9_quan/randbet_0.2_0.01_10_-1/model_best.pth.tar'
=> loaded checkpoint './save/resnet9_quan/randbet_0.2_0.01_10_-1/model_best.pth.tar' (epoch 0)
  **Test** Prec@1 56.760 Prec@5 93.630 Error@1 43.240
k_top=100
Attack_sample=100
************** ATTACK iteration *****************
Iteration: [001/030]   Attack Time 0.524 (0.524)  [2025-10-29 14:11:07]
loss before attack: 1.5696
loss after attack: 1.7181
bit flips: 1
hamming_dist: 1
  **Test** Prec@1 53.560 Prec@5 92.730 Error@1 46.440
iteration Time 18.389 (18.389)
************** ATTACK iteration *****************
Iteration: [002/030]   Attack Time 0.281 (0.402)  [2025-10-29 14:11:26]
loss before attack: 1.7181
loss after attack: 1.9183
bit flips: 2
hamming_dist: 2
  **Test** Prec@1 45.820 Prec@5 89.670 Error@1 54.180
iteration Time 19.792 (19.091)
************** ATTACK iteration *****************
Iteration: [003/030]   Attack Time 0.255 (0.353)  [2025-10-29 14:11:46]
loss before attack: 1.9183
loss after attack: 2.0664
bit flips: 3
hamming_dist: 3
  **Test** Prec@1 35.430 Prec@5 83.330 Error@1 64.570
iteration Time 20.394 (19.525)
************** ATTACK iteration *****************
Iteration: [004/030]   Attack Time 0.252 (0.328)  [2025-10-29 14:12:07]
loss before attack: 2.0664
loss after attack: 2.1706
bit flips: 4
hamming_dist: 4
  **Test** Prec@1 27.090 Prec@5 76.710 Error@1 72.910
iteration Time 19.979 (19.638)
************** ATTACK iteration *****************
Iteration: [005/030]   Attack Time 0.256 (0.313)  [2025-10-29 14:12:27]
loss before attack: 2.1706
loss after attack: 2.2746
bit flips: 5
hamming_dist: 5
  **Test** Prec@1 21.400 Prec@5 69.360 Error@1 78.600
iteration Time 23.757 (20.462)
************** ATTACK iteration *****************
Iteration: [006/030]   Attack Time 0.267 (0.306)  [2025-10-29 14:12:51]
loss before attack: 2.2746
loss after attack: 2.3249
bit flips: 6
hamming_dist: 6
  **Test** Prec@1 16.120 Prec@5 60.840 Error@1 83.880
iteration Time 21.722 (20.672)
************** ATTACK iteration *****************
Iteration: [007/030]   Attack Time 0.264 (0.300)  [2025-10-29 14:13:13]
loss before attack: 2.3249
loss after attack: 2.3390
bit flips: 7
hamming_dist: 7
  **Test** Prec@1 15.090 Prec@5 59.660 Error@1 84.910
iteration Time 21.953 (20.855)
************** ATTACK iteration *****************
Iteration: [008/030]   Attack Time 0.272 (0.296)  [2025-10-29 14:13:35]
loss before attack: 2.3390
loss after attack: 2.3486
bit flips: 8
hamming_dist: 8
  **Test** Prec@1 13.930 Prec@5 57.340 Error@1 86.070
iteration Time 19.197 (20.648)
************** ATTACK iteration *****************
Iteration: [009/030]   Attack Time 0.175 (0.283)  [2025-10-29 14:13:55]
loss before attack: 2.3486
loss after attack: 2.3581
bit flips: 9
hamming_dist: 9
  **Test** Prec@1 12.340 Prec@5 52.320 Error@1 87.660
iteration Time 19.368 (20.506)
************** ATTACK iteration *****************
Iteration: [010/030]   Attack Time 0.167 (0.271)  [2025-10-29 14:14:14]
loss before attack: 2.3581
loss after attack: 2.3783
bit flips: 10
hamming_dist: 10
  **Test** Prec@1 11.190 Prec@5 50.730 Error@1 88.810
iteration Time 19.461 (20.401)
************** ATTACK iteration *****************
Iteration: [011/030]   Attack Time 0.164 (0.261)  [2025-10-29 14:14:34]
loss before attack: 2.3783
loss after attack: 2.3802
bit flips: 11
hamming_dist: 11
  **Test** Prec@1 10.660 Prec@5 50.070 Error@1 89.340
iteration Time 20.221 (20.385)
