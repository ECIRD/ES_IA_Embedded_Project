save path : ./save/resnet9_quan/randbet_0.2_0.01_10_-1/results/758
{'data_path': './dataset', 'arch': 'resnet9_quan', 'dataset': 'cifar10', 'epochs': 40, 'start_epoch': 0, 'attack_sample_size': 100, 'test_batch_size': 100, 'optimizer': 'SGD', 'schedule': [25, 40], 'gammas': [0.1, 0.1], 'workers': 4, 'ngpu': 1, 'gpu_id': 0, 'print_freq': 100, 'decay': 0.0003, 'momentum': 0.9, 'limit_layer': -1, 'randbet_coeff': 10, 'k_top': 100, 'randbet': True, 'clipping_coeff': 0.2, 'learning_rate': 0.01, 'manualSeed': 758, 'save_path': './save/resnet9_quan/randbet_0.2_0.01_10_-1/results/758', 'enable_bfa': True, 'resume': './save/resnet9_quan/randbet_0.2_0.01_10_-1/model_best.pth.tar', 'quan_bitwidth': None, 'reset_weight': True, 'evaluate': True, 'n_iter': 30, 'fine_tune': True, 'model_only': False, 'random_bfa': False, 'use_cuda': True}
Random Seed: 758
python version : 3.12.12 | packaged by Anaconda, Inc. | (main, Oct 14 2025, 16:10:16) [MSC v.1929 64 bit (AMD64)]
torch  version : 2.6.0+cu124
cudnn  version : 90100
=> creating model 'resnet9_quan'
=> network :
 Sequential(
  (0): Sequential(
    (0): quan_Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (1): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (2): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (4): Dropout2d(p=0.2, inplace=False)
  (5): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (skip): Conv2d(8, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  )
  (6): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (8): Dropout2d(p=0.3, inplace=False)
  (9): Sequential(
    (0): quan_Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (10): Sequential(
    (0): quan_Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (12): Dropout2d(p=0.3, inplace=False)
  (13): Sequential(
    (0): quan_Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (14): AdaptiveAvgPool2d(output_size=(1, 1))
  (15): Flatten()
  (16): quan_Linear(in_features=64, out_features=128, bias=False)
  (17): ReLU(inplace=True)
  (18): Dropout(p=0.35, inplace=False)
  (19): quan_Linear(in_features=128, out_features=10, bias=False)
  (20): Softmax(dim=1)
)
=> loading checkpoint './save/resnet9_quan/randbet_0.2_0.01_10_-1/model_best.pth.tar'
=> loaded checkpoint './save/resnet9_quan/randbet_0.2_0.01_10_-1/model_best.pth.tar' (epoch 0)
  **Test** Prec@1 56.760 Prec@5 93.630 Error@1 43.240
k_top=100
Attack_sample=100
************** ATTACK iteration *****************
Iteration: [001/030]   Attack Time 0.613 (0.613)  [2025-10-29 13:45:33]
loss before attack: 1.5733
loss after attack: 1.7297
bit flips: 1
hamming_dist: 1
  **Test** Prec@1 55.950 Prec@5 93.520 Error@1 44.050
iteration Time 21.828 (21.828)
************** ATTACK iteration *****************
Iteration: [002/030]   Attack Time 0.296 (0.454)  [2025-10-29 13:45:55]
loss before attack: 1.7297
loss after attack: 1.9436
bit flips: 2
hamming_dist: 2
  **Test** Prec@1 51.000 Prec@5 91.660 Error@1 49.000
iteration Time 21.688 (21.758)
************** ATTACK iteration *****************
Iteration: [003/030]   Attack Time 0.293 (0.401)  [2025-10-29 13:46:17]
loss before attack: 1.9436
loss after attack: 2.0226
bit flips: 3
hamming_dist: 3
  **Test** Prec@1 45.580 Prec@5 89.020 Error@1 54.420
iteration Time 21.347 (21.621)
************** ATTACK iteration *****************
Iteration: [004/030]   Attack Time 0.276 (0.370)  [2025-10-29 13:46:39]
loss before attack: 2.0226
loss after attack: 2.0834
bit flips: 4
hamming_dist: 4
  **Test** Prec@1 42.080 Prec@5 87.350 Error@1 57.920
iteration Time 21.733 (21.649)
************** ATTACK iteration *****************
Iteration: [005/030]   Attack Time 0.302 (0.356)  [2025-10-29 13:47:01]
loss before attack: 2.0834
loss after attack: 2.1586
bit flips: 5
hamming_dist: 5
  **Test** Prec@1 35.580 Prec@5 82.950 Error@1 64.420
iteration Time 21.516 (21.622)
************** ATTACK iteration *****************
Iteration: [006/030]   Attack Time 0.290 (0.345)  [2025-10-29 13:47:23]
loss before attack: 2.1586
loss after attack: 2.2239
bit flips: 6
hamming_dist: 6
  **Test** Prec@1 25.530 Prec@5 75.120 Error@1 74.470
iteration Time 21.589 (21.617)
************** ATTACK iteration *****************
Iteration: [007/030]   Attack Time 0.289 (0.337)  [2025-10-29 13:47:45]
loss before attack: 2.2239
loss after attack: 2.2885
bit flips: 7
hamming_dist: 7
  **Test** Prec@1 17.970 Prec@5 67.080 Error@1 82.030
iteration Time 21.470 (21.596)
************** ATTACK iteration *****************
Iteration: [008/030]   Attack Time 0.285 (0.331)  [2025-10-29 13:48:07]
loss before attack: 2.2885
loss after attack: 2.3195
bit flips: 8
hamming_dist: 8
  **Test** Prec@1 13.610 Prec@5 62.850 Error@1 86.390
iteration Time 21.365 (21.567)
************** ATTACK iteration *****************
Iteration: [009/030]   Attack Time 0.289 (0.326)  [2025-10-29 13:48:28]
loss before attack: 2.3195
loss after attack: 2.3434
bit flips: 9
hamming_dist: 9
  **Test** Prec@1 12.490 Prec@5 62.020 Error@1 87.510
iteration Time 21.548 (21.565)
************** ATTACK iteration *****************
Iteration: [010/030]   Attack Time 0.299 (0.323)  [2025-10-29 13:48:50]
loss before attack: 2.3434
loss after attack: 2.3574
bit flips: 10
hamming_dist: 10
  **Test** Prec@1 11.330 Prec@5 61.460 Error@1 88.670
iteration Time 21.365 (21.545)
************** ATTACK iteration *****************
Iteration: [011/030]   Attack Time 0.288 (0.320)  [2025-10-29 13:49:12]
loss before attack: 2.3574
loss after attack: 2.3656
bit flips: 11
hamming_dist: 11
  **Test** Prec@1 11.170 Prec@5 60.880 Error@1 88.830
iteration Time 21.569 (21.547)
************** ATTACK iteration *****************
Iteration: [012/030]   Attack Time 0.293 (0.318)  [2025-10-29 13:49:34]
loss before attack: 2.3656
loss after attack: 2.3711
bit flips: 12
hamming_dist: 12
  **Test** Prec@1 10.980 Prec@5 60.070 Error@1 89.020
iteration Time 21.369 (21.532)
