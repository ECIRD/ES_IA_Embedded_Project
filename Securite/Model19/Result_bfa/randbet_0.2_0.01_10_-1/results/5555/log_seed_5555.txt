save path : ./save/resnet9_quan/randbet_0.2_0.01_10_-1/results/5555
{'data_path': './dataset', 'arch': 'resnet9_quan', 'dataset': 'cifar10', 'epochs': 40, 'start_epoch': 0, 'attack_sample_size': 100, 'test_batch_size': 100, 'optimizer': 'SGD', 'schedule': [25, 40], 'gammas': [0.1, 0.1], 'workers': 4, 'ngpu': 1, 'gpu_id': 0, 'print_freq': 100, 'decay': 0.0003, 'momentum': 0.9, 'limit_layer': -1, 'randbet_coeff': 10, 'k_top': 100, 'randbet': True, 'clipping_coeff': 0.2, 'learning_rate': 0.01, 'manualSeed': 5555, 'save_path': './save/resnet9_quan/randbet_0.2_0.01_10_-1/results/5555', 'enable_bfa': True, 'resume': './save/resnet9_quan/randbet_0.2_0.01_10_-1/model_best.pth.tar', 'quan_bitwidth': None, 'reset_weight': True, 'evaluate': True, 'n_iter': 30, 'fine_tune': True, 'model_only': False, 'random_bfa': False, 'use_cuda': True}
Random Seed: 5555
python version : 3.12.12 | packaged by Anaconda, Inc. | (main, Oct 14 2025, 16:10:16) [MSC v.1929 64 bit (AMD64)]
torch  version : 2.6.0+cu124
cudnn  version : 90100
=> creating model 'resnet9_quan'
=> network :
 Sequential(
  (0): Sequential(
    (0): quan_Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (1): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (2): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (4): Dropout2d(p=0.2, inplace=False)
  (5): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(8, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (skip): Conv2d(8, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  )
  (6): Residual(
    (module): Sequential(
      (0): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): quan_Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (8): Dropout2d(p=0.3, inplace=False)
  (9): Sequential(
    (0): quan_Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (10): Sequential(
    (0): quan_Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (12): Dropout2d(p=0.3, inplace=False)
  (13): Sequential(
    (0): quan_Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (14): AdaptiveAvgPool2d(output_size=(1, 1))
  (15): Flatten()
  (16): quan_Linear(in_features=64, out_features=128, bias=False)
  (17): ReLU(inplace=True)
  (18): Dropout(p=0.35, inplace=False)
  (19): quan_Linear(in_features=128, out_features=10, bias=False)
  (20): Softmax(dim=1)
)
=> loading checkpoint './save/resnet9_quan/randbet_0.2_0.01_10_-1/model_best.pth.tar'
=> loaded checkpoint './save/resnet9_quan/randbet_0.2_0.01_10_-1/model_best.pth.tar' (epoch 0)
  **Test** Prec@1 56.760 Prec@5 93.630 Error@1 43.240
k_top=100
Attack_sample=100
************** ATTACK iteration *****************
Iteration: [001/030]   Attack Time 0.612 (0.612)  [2025-10-29 13:39:57]
loss before attack: 1.5718
loss after attack: 1.7092
bit flips: 1
hamming_dist: 1
  **Test** Prec@1 55.950 Prec@5 93.520 Error@1 44.050
iteration Time 21.505 (21.505)
************** ATTACK iteration *****************
Iteration: [002/030]   Attack Time 0.288 (0.450)  [2025-10-29 13:40:19]
loss before attack: 1.7092
loss after attack: 1.8086
bit flips: 2
hamming_dist: 2
  **Test** Prec@1 54.140 Prec@5 91.930 Error@1 45.860
iteration Time 21.346 (21.425)
************** ATTACK iteration *****************
Iteration: [003/030]   Attack Time 0.294 (0.398)  [2025-10-29 13:40:41]
loss before attack: 1.8086
loss after attack: 1.9486
bit flips: 3
hamming_dist: 3
  **Test** Prec@1 45.980 Prec@5 85.800 Error@1 54.020
iteration Time 21.626 (21.492)
************** ATTACK iteration *****************
Iteration: [004/030]   Attack Time 0.284 (0.370)  [2025-10-29 13:41:02]
loss before attack: 1.9486
loss after attack: 2.0786
bit flips: 4
hamming_dist: 4
  **Test** Prec@1 39.370 Prec@5 80.050 Error@1 60.630
iteration Time 21.397 (21.469)
************** ATTACK iteration *****************
Iteration: [005/030]   Attack Time 0.292 (0.354)  [2025-10-29 13:41:24]
loss before attack: 2.0786
loss after attack: 2.1630
bit flips: 5
hamming_dist: 5
  **Test** Prec@1 32.430 Prec@5 76.590 Error@1 67.570
iteration Time 21.325 (21.440)
************** ATTACK iteration *****************
Iteration: [006/030]   Attack Time 0.290 (0.343)  [2025-10-29 13:41:46]
loss before attack: 2.1630
loss after attack: 2.1934
bit flips: 6
hamming_dist: 6
  **Test** Prec@1 27.770 Prec@5 73.520 Error@1 72.230
iteration Time 21.466 (21.444)
************** ATTACK iteration *****************
Iteration: [007/030]   Attack Time 0.293 (0.336)  [2025-10-29 13:42:08]
loss before attack: 2.1934
loss after attack: 2.2091
bit flips: 7
hamming_dist: 7
  **Test** Prec@1 25.150 Prec@5 69.680 Error@1 74.850
iteration Time 21.632 (21.471)
************** ATTACK iteration *****************
Iteration: [008/030]   Attack Time 0.289 (0.330)  [2025-10-29 13:42:29]
loss before attack: 2.2091
loss after attack: 2.2272
bit flips: 8
hamming_dist: 8
  **Test** Prec@1 21.200 Prec@5 63.970 Error@1 78.800
iteration Time 21.598 (21.487)
************** ATTACK iteration *****************
Iteration: [009/030]   Attack Time 0.288 (0.326)  [2025-10-29 13:42:51]
loss before attack: 2.2272
loss after attack: 2.2692
bit flips: 9
hamming_dist: 9
  **Test** Prec@1 20.310 Prec@5 66.630 Error@1 79.690
iteration Time 21.699 (21.511)
************** ATTACK iteration *****************
Iteration: [010/030]   Attack Time 0.293 (0.322)  [2025-10-29 13:43:13]
loss before attack: 2.2692
loss after attack: 2.2776
bit flips: 10
hamming_dist: 10
  **Test** Prec@1 15.280 Prec@5 55.400 Error@1 84.720
iteration Time 21.758 (21.535)
************** ATTACK iteration *****************
Iteration: [011/030]   Attack Time 0.295 (0.320)  [2025-10-29 13:43:35]
loss before attack: 2.2776
loss after attack: 2.3093
bit flips: 11
hamming_dist: 11
  **Test** Prec@1 12.910 Prec@5 52.120 Error@1 87.090
iteration Time 21.618 (21.543)
************** ATTACK iteration *****************
Iteration: [012/030]   Attack Time 0.290 (0.317)  [2025-10-29 13:43:57]
loss before attack: 2.3093
loss after attack: 2.3367
bit flips: 12
hamming_dist: 12
  **Test** Prec@1 11.590 Prec@5 49.620 Error@1 88.410
iteration Time 21.644 (21.551)
************** ATTACK iteration *****************
Iteration: [013/030]   Attack Time 0.279 (0.314)  [2025-10-29 13:44:19]
loss before attack: 2.3367
loss after attack: 2.3607
bit flips: 13
hamming_dist: 13
  **Test** Prec@1 10.820 Prec@5 49.490 Error@1 89.180
iteration Time 21.592 (21.554)
